# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget hardware_plant::hardware_plant hardware_plant::hardware_plant_cxx hardware_plant::xsens_mti_driver hardware_plant::ec_master_main hardware_plant::ec_app hardware_plant::ruierman_actuatorLib hardware_plant::jodell_claw_driver hardware_plant::dxl_x64_cpp hardware_plant::mathtools_hw hardware_plant::lejuclaw hardware_plant::hipnuc_imu_receiver hardware_plant::dexhand_sdk hardware_plant::ruiwo_actuatorLib hardware_plant::ruiwo_actuatorCXXLib hardware_plant::xsens-lcm-types-lib)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target hardware_plant::hardware_plant
add_library(hardware_plant::hardware_plant STATIC IMPORTED)

set_target_properties(hardware_plant::hardware_plant PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/hardware_plant;${_IMPORT_PREFIX}/include/kuavo_common;${_IMPORT_PREFIX}/include/ruiwo_controller;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "gflags;hardware_plant::xsens_mti_driver;casadi;ncurses;hardware_plant::ec_master_main;hardware_plant::ec_app;hardware_plant::ruierman_actuatorLib;hardware_plant::jodell_claw_driver;hardware_plant::dxl_x64_cpp;hardware_plant::mathtools_hw;hardware_plant::lejuclaw;hardware_plant::hipnuc_imu_receiver;hardware_plant::dexhand_sdk;stdc++fs;hardware_plant::ruiwo_actuatorLib;/media/data/gitlab-runner/builds/8rHoW4Dt/0/highlydynamic/kuavo-ros-control/devel/lib/libkuavo_common.so"
)

# Create imported target hardware_plant::hardware_plant_cxx
add_library(hardware_plant::hardware_plant_cxx STATIC IMPORTED)

set_target_properties(hardware_plant::hardware_plant_cxx PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/hardware_plant;${_IMPORT_PREFIX}/include/kuavo_common;${_IMPORT_PREFIX}/include/ruiwo_controller_cxx;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "gflags;hardware_plant::xsens_mti_driver;casadi;ncurses;hardware_plant::ec_master_main;hardware_plant::ec_app;hardware_plant::ruierman_actuatorLib;hardware_plant::jodell_claw_driver;hardware_plant::dxl_x64_cpp;hardware_plant::mathtools_hw;hardware_plant::lejuclaw;hardware_plant::hipnuc_imu_receiver;hardware_plant::dexhand_sdk;stdc++fs;hardware_plant::ruiwo_actuatorCXXLib;/media/data/gitlab-runner/builds/8rHoW4Dt/0/highlydynamic/kuavo-ros-control/devel/lib/libkuavo_common.so"
)

# Create imported target hardware_plant::xsens_mti_driver
add_library(hardware_plant::xsens_mti_driver STATIC IMPORTED)

set_target_properties(hardware_plant::xsens_mti_driver PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/xsens_ros_mti_driver/src;${_IMPORT_PREFIX}/include/xsens_ros_mti_driver/lib/xspublic;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "xscontroller;xscommon;xstypes;pthread;dl;lcm;hardware_plant::xsens-lcm-types-lib"
)

# Create imported target hardware_plant::ec_master_main
add_library(hardware_plant::ec_master_main STATIC IMPORTED)

set_target_properties(hardware_plant::ec_master_main PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/EC_Master/Common;${_IMPORT_PREFIX}/include/EC_Master/SDK/INC;${_IMPORT_PREFIX}/include/EC_Master/SDK/INC/Linux;${_IMPORT_PREFIX}/include/EC_Master/Sharelib/Common;${_IMPORT_PREFIX}/include/EC_Master/Sharelib/EcMasterDemo;${_IMPORT_PREFIX}/include/EC_Master/Sharelib/Linux;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "libAtemRasSrv.a;libEcMaster.a;libemllI8254x.so;-pthread;-ldl"
)

# Create imported target hardware_plant::ec_app
add_library(hardware_plant::ec_app STATIC IMPORTED)

set_target_properties(hardware_plant::ec_app PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/EC_Master/Common;${_IMPORT_PREFIX}/include/EC_Master/SDK/INC;${_IMPORT_PREFIX}/include/EC_Master/SDK/INC/Linux;${_IMPORT_PREFIX}/include/EC_Master/Sharelib/Common;${_IMPORT_PREFIX}/include/EC_Master/Sharelib/EcMasterDemo;${_IMPORT_PREFIX}/include/EC_Master/Sharelib/Linux;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "libAtemRasSrv.a;libEcMaster.a;libemllI8254x.so;-pthread;-ldl"
)

# Create imported target hardware_plant::ruierman_actuatorLib
add_library(hardware_plant::ruierman_actuatorLib SHARED IMPORTED)

set_target_properties(hardware_plant::ruierman_actuatorLib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "/usr/include/python3.8;${_IMPORT_PREFIX}/include/ruierman_controller;/usr/include/python3.8;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Python3::Python;stdc++fs;-pthread"
)

# Create imported target hardware_plant::jodell_claw_driver
add_library(hardware_plant::jodell_claw_driver SHARED IMPORTED)

set_target_properties(hardware_plant::jodell_claw_driver PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/jodell_claw_driver;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_DIRECTORIES "${_IMPORT_PREFIX}/lib"
  INTERFACE_LINK_LIBRARIES "jodellTool;jodellTool2;-pthread"
)

# Create imported target hardware_plant::dxl_x64_cpp
add_library(hardware_plant::dxl_x64_cpp SHARED IMPORTED)

set_target_properties(hardware_plant::dxl_x64_cpp PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/DynamixelSDK/include/dynamixel_sdk;${_IMPORT_PREFIX}/include/DynamixelSDK/src;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "pthread;Boost::system;Boost::filesystem"
)

# Create imported target hardware_plant::mathtools_hw
add_library(hardware_plant::mathtools_hw SHARED IMPORTED)

set_target_properties(hardware_plant::mathtools_hw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/Math;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "drake::drake"
)

# Create imported target hardware_plant::lejuclaw
add_library(hardware_plant::lejuclaw STATIC IMPORTED)

set_target_properties(hardware_plant::lejuclaw PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/leju_claw_driver;${_IMPORT_PREFIX}/include/leju_claw_driver/3rd_party;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_DIRECTORIES "${_IMPORT_PREFIX}/lib"
  INTERFACE_LINK_LIBRARIES "yaml-cpp;stdc++fs;usb-1.0;bmapi64;stdc++;pthread"
)

# Create imported target hardware_plant::hipnuc_imu_receiver
add_library(hardware_plant::hipnuc_imu_receiver SHARED IMPORTED)

set_target_properties(hardware_plant::hipnuc_imu_receiver PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/hipnuc_imu/src;/usr/include/eigen3;${_IMPORT_PREFIX}/include"
)

# Create imported target hardware_plant::dexhand_sdk
add_library(hardware_plant::dexhand_sdk STATIC IMPORTED)

set_target_properties(hardware_plant::dexhand_sdk PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/dexhand_sdk;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_DIRECTORIES "${_IMPORT_PREFIX}/lib"
  INTERFACE_LINK_LIBRARIES "bc_stark_sdk;stark;serialport;m;pthread;rt;dl"
)

# Create imported target hardware_plant::ruiwo_actuatorLib
add_library(hardware_plant::ruiwo_actuatorLib SHARED IMPORTED)

set_target_properties(hardware_plant::ruiwo_actuatorLib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/ruiwo_controller;/usr/include/python3.8;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Python3::Python;stdc++fs;-pthread;yaml-cpp"
)

# Create imported target hardware_plant::ruiwo_actuatorCXXLib
add_library(hardware_plant::ruiwo_actuatorCXXLib SHARED IMPORTED)

set_target_properties(hardware_plant::ruiwo_actuatorCXXLib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/ruiwo_controller_cxx;${_IMPORT_PREFIX}/include/ruiwo_controller_cxx/include;${_IMPORT_PREFIX}/include/leju_claw_driver;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "yaml-cpp;stdc++fs;usb-1.0;bmapi64;stdc++;pthread"
)

# Create imported target hardware_plant::xsens-lcm-types-lib
add_library(hardware_plant::xsens-lcm-types-lib INTERFACE IMPORTED)

set_target_properties(hardware_plant::xsens-lcm-types-lib PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/xsens_ros_mti_driver/lcmtypes;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "lcm::lcm-coretypes"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/hardware_plantTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
