// Generated by gencpp from file hardware_node/robotHeadMotionData.msg
// DO NOT EDIT!


#ifndef HARDWARE_NODE_MESSAGE_ROBOTHEADMOTIONDATA_H
#define HARDWARE_NODE_MESSAGE_ROBOTHEADMOTIONDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hardware_node
{
template <class ContainerAllocator>
struct robotHeadMotionData_
{
  typedef robotHeadMotionData_<ContainerAllocator> Type;

  robotHeadMotionData_()
    : target_position()  {
    }
  robotHeadMotionData_(const ContainerAllocator& _alloc)
    : target_position(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _target_position_type;
  _target_position_type target_position;





  typedef boost::shared_ptr< ::hardware_node::robotHeadMotionData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hardware_node::robotHeadMotionData_<ContainerAllocator> const> ConstPtr;

}; // struct robotHeadMotionData_

typedef ::hardware_node::robotHeadMotionData_<std::allocator<void> > robotHeadMotionData;

typedef boost::shared_ptr< ::hardware_node::robotHeadMotionData > robotHeadMotionDataPtr;
typedef boost::shared_ptr< ::hardware_node::robotHeadMotionData const> robotHeadMotionDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hardware_node::robotHeadMotionData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hardware_node::robotHeadMotionData_<ContainerAllocator1> & lhs, const ::hardware_node::robotHeadMotionData_<ContainerAllocator2> & rhs)
{
  return lhs.target_position == rhs.target_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hardware_node::robotHeadMotionData_<ContainerAllocator1> & lhs, const ::hardware_node::robotHeadMotionData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hardware_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hardware_node::robotHeadMotionData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hardware_node::robotHeadMotionData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hardware_node::robotHeadMotionData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84c8c0833844df50ca703c90b47affbc";
  }

  static const char* value(const ::hardware_node::robotHeadMotionData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84c8c0833844df50ULL;
  static const uint64_t static_value2 = 0xca703c90b47affbcULL;
};

template<class ContainerAllocator>
struct DataType< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hardware_node/robotHeadMotionData";
  }

  static const char* value(const ::hardware_node::robotHeadMotionData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 机器人头部电机位置 [0, 0]\n"
"int32[] target_position\n"
;
  }

  static const char* value(const ::hardware_node::robotHeadMotionData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotHeadMotionData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hardware_node::robotHeadMotionData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hardware_node::robotHeadMotionData_<ContainerAllocator>& v)
  {
    s << indent << "target_position[]" << std::endl;
    for (size_t i = 0; i < v.target_position.size(); ++i)
    {
      s << indent << "  target_position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.target_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HARDWARE_NODE_MESSAGE_ROBOTHEADMOTIONDATA_H
